function actor = make_actor( ...
    env, ...
    samples, ...
    actor_mean, ...
    actor_covariance, ...
    nits ...
    )

if nargin < 5
    nits = 100;
end

%% Get Information
obsInfo = getObservationInfo(env);
actInfo = getActionInfo(env);

%% Set Actor
% Create a network to be used as underlying actor approximator
actorNet = [
    featureInputLayer(prod(obsInfo.Dimension))
    TwinNetworkLayer( ...
    'Name', 'twin_network_layer', ...
    'input_nodes', bitshift(prod(obsInfo.Dimension), -1), ...
    'hidden_nodes', 32, ...
    'output_nodes', bitshift(prod(actInfo.Dimension), -1) ...
    );
    ];

% Convert to dlnetwork object
actorNet = dlnetwork(actorNet);

% Pretrain the actor
S_pretrain = [samples, samples];
Sig_half = sqrtm(actor_covariance);

phi_pretrain = [
    (repmat(actor_mean',nits,1) - samples) / Sig_half, ...
    (repmat(actor_mean',nits,1) - samples) / Sig_half
    ];

pretrain_options = trainingOptions( ...
    "adam", ...
    "MaxEpochs", 1000 ...
    );

actorNet = trainnet(S_pretrain, ...
    phi_pretrain, ...
    actorNet, ...
    "mse", ...
    pretrain_options);

% Create the actor
actor = rlContinuousDeterministicActor(actorNet,obsInfo,actInfo);

end
